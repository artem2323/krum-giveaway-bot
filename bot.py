import asyncio
import time
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import create_engine, Column, Integer, String, DateTime, Boolean, ForeignKey, select
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship, selectinload
from sqlalchemy.ext.asyncio import AsyncSession, create_asyncio_engine
import os
from aiohttp import web

# === –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===
BOT_TOKEN = os.getenv("8246831652:AAFRB6Qybun4GNXHDWllyEq_yvn6DObLSh8")
ADMIN_ID = int(os.getenv("1235789985"))
CHANNEL_ID = int(os.getenv("-1002389662159"))
CHANNEL_USERNAME = os.getenv("crum_online")

# === –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• ===
DATABASE_URL = "sqlite+aiosqlite:///./giveaways.db"
Base = declarative_base()

# === –ú–û–î–ï–õ–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ===
class Giveaway(Base):
    __tablename__ = 'giveaways'
    message_id = Column(Integer, primary_key=True)
    title = Column(String, nullable=False)
    chat_id = Column(Integer, nullable=False)
    channel_message_id = Column(Integer)
    end_time = Column(DateTime, nullable=False)
    is_active = Column(Boolean, default=True)
    participants = relationship("Participant", back_populates="giveaway", cascade="all, delete-orphan")

class Participant(Base):
    __tablename__ = 'participants'
    id = Column(Integer, primary_key=True)
    giveaway_id = Column(Integer, ForeignKey('giveaways.message_id'))
    user_id = Column(Integer, nullable=False)
    username = Column(String)
    full_name = Column(String, nullable=False)
    giveaway = relationship("Giveaway", back_populates="participants")

# === –°–û–ó–î–ê–ù–ò–ï –ë–û–¢–ê –ò –ë–î ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –ë–î
engine = create_async_engine(DATABASE_URL, echo=False)
async_session = sessionmaker(
    engine, class_=AsyncSession, expire_on_commit=False
)

# === HEALTH-CHECK –°–ï–†–í–ï–† (—á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∑–∞—Å—ã–ø–∞–ª) ===
async def start_webserver():
    async def health_check(request):
        return web.Response(text="OK", status=200)
    
    app = web.Application()
    app.router.add_get('/health', health_check)
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    port = int(os.getenv('PORT', 8080))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    print(f"‚úÖ Health-check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ===
async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    asyncio.create_task(check_active_giveaways())

# === –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–´–• –†–û–ó–´–ì–†–´–®–ï–ô ===
async def check_active_giveaways():
    await asyncio.sleep(5)
    async with async_session() as session:
        result = await session.execute(
            selectinload(Giveaway).where(Giveaway.is_active == True)
        )
        active_giveaways = result.scalars().all()
        
        for giveaway in active_giveaways:
            time_left = (giveaway.end_time - datetime.now()).total_seconds()
            if time_left > 0:
                if time_left > 3600:
                    asyncio.create_task(send_reminder(giveaway.message_id, time_left - 3600))
                asyncio.create_task(close_giveaway_after(giveaway.message_id, time_left))
            else:
                await close_giveaway(giveaway.message_id)

# === –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –ó–ê 1 –ß–ê–° ===
async def send_reminder(message_id: int, delay: float):
    await asyncio.sleep(delay)
    async with async_session() as session:
        giveaway = await session.get(Giveaway, message_id)
        if not giveaway or not giveaway.is_active:
            return
        link = f"https://t.me/{CHANNEL_USERNAME}/{giveaway.channel_message_id}" if CHANNEL_USERNAME else ""
        participants = giveaway.participants
        for participant in participants:
            try:
                await bot.send_message(
                    participant.user_id,
                    f"‚è∞ –í–Ω–∏–º–∞–Ω–∏–µ!\n\n–†–æ–∑—ã–≥—Ä—ã—à ¬´{giveaway.title}¬ª –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å!\n\n–£—Å–ø–µ–π—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üéÅ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", url=link)]
                    ]) if link else None
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {participant.user_id}: {e}")
            await asyncio.sleep(0.05)

# === –ó–ê–ö–†–´–¢–¨ –†–û–ó–´–ì–†–´–® ===
async def close_giveaway_after(message_id: int, delay: float):
    await asyncio.sleep(delay)
    await close_giveaway(message_id)

async def close_giveaway(message_id: int):
    async with async_session() as session:
        giveaway = await session.get(Giveaway, message_id)
        if giveaway and giveaway.is_active:
            giveaway.is_active = False
            await session.commit()
            try:
                await bot.edit_message_text(
                    chat_id=CHANNEL_ID,
                    message_id=giveaway.channel_message_id,
                    text=f"üéâ –†–û–ó–´–ì–†–´–®: {giveaway.title}\n\n‚è∞ –í—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–±–µ—Ä–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üèÜ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data=f"list_{message_id}")]
                    ])
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")

# === –°–¢–ê–†–¢ ===
@dp.message(Command("start"))
async def start(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üëë –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
                             "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                             "/startgiveaway <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–≤—Ä–µ–º—è> ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à\n"
                             "–ü—Ä–∏–º–µ—Ä: /startgiveaway –ü—Ä–∏–∑ 24h\n\n"
                             "/broadcast <—Ç–µ–∫—Å—Ç> ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n"
                             "/list <id_–ø–æ—Å—Ç–∞> ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                             "/winner <id_–ø–æ—Å—Ç–∞> <id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> ‚Äî –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è")
    else:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ üëá",
                             reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                 [InlineKeyboardButton(text="üéÅ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="join_giveaway")]
                             ]))

# === –†–ê–°–°–´–õ–ö–ê ===
@dp.message(Command("broadcast"))
async def broadcast(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    if len(message.text.split()) < 2:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:\n/broadcast –ü—Ä–∏–≤–µ—Ç! –°–∫–æ—Ä–æ –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à!")
        return
    text = message.text.split(maxsplit=1)[1]
    async with async_session() as session:
        result = await session.execute("SELECT DISTINCT user_id FROM participants")
        user_ids = [row[0] for row in result]
    success = 0
    for user_id in user_ids:
        try:
            await bot.send_message(user_id, text)
            success += 1
            await asyncio.sleep(0.05)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
    await message.answer(f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}")

# === –ó–ê–ü–£–°–ö –†–û–ó–´–ì–†–´–®–ê ===
@dp.message(Command("startgiveaway"))
async def start_giveaway(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    try:
        parts = message.text.split(maxsplit=2)
        title = parts[1]
        duration_str = parts[2]
    except:
        await message.answer("‚ùó /startgiveaway –ù–∞–∑–≤–∞–Ω–∏–µ 24h")
        return
    try:
        if duration_str.endswith('h'):
            duration = timedelta(hours=int(duration_str[:-1]))
        elif duration_str.endswith('d'):
            duration = timedelta(days=int(duration_str[:-1]))
        elif duration_str.endswith('w'):
            duration = timedelta(weeks=int(duration_str[:-1]))
        else:
            raise ValueError
        end_time = datetime.now() + duration
    except:
        await message.answer("‚ùó –í—Ä–µ–º—è: 12h, 3d, 2w")
        return
    admin_msg = await message.answer(
        f"üéâ –†–û–ó–´–ì–†–´–®: {title}\n‚è∞ –î–æ –∫–æ–Ω—Ü–∞: {duration_str}\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÅ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="join_giveaway")]
        ])
    )
    try:
        channel_msg = await bot.send_message(
            CHANNEL_ID,
            f"üåä –ö–†–´–ú. –†–û–ó–´–ì–†–´–®\n\nüéâ –ü—Ä–∏–∑: {title}\n‚è∞ –î–æ –∫–æ–Ω—Ü–∞: {duration_str}\n\n–£—á–∞—Å—Ç–≤—É–π—Ç–µ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéÅ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="join_giveaway")]
            ])
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ: {str(e)}")
        return
    async with async_session() as session:
        new_giveaway = Giveaway(
            message_id=admin_msg.message_id,
            channel_message_id=channel_msg.message_id,
            title=title,
            chat_id=message.chat.id,
            end_time=end_time
        )
        session.add(new_giveaway)
        await session.commit()
    time_left = (end_time - datetime.now()).total_seconds()
    if time_left > 3600:
        asyncio.create_task(send_reminder(admin_msg.message_id, time_left - 3600))
    asyncio.create_task(close_giveaway_after(admin_msg.message_id, time_left))
    await message.answer(f"‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–ø—É—â–µ–Ω!\nID: {admin_msg.message_id}\n–ó–∞–≤–µ—Ä—à–∏—Ç—Å—è: {end_time.strftime('%d.%m %H:%M')}")

# === –£–ß–ê–°–¢–ò–ï ===
@dp.callback_query(lambda c: c.data == "join_giveaway")
async def join_giveaway(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    msg_id = callback.message.message_id
    async with async_session() as session:
        giveaway = await session.execute(
            selectinload(Giveaway).where(Giveaway.channel_message_id == msg_id)
        )
        giveaway = giveaway.scalars().first()
        if not giveaway:
            giveaway = await session.get(Giveaway, msg_id)
        if not giveaway or not giveaway.is_active:
            await callback.answer("–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω")
            return
        result = await session.execute(
            selectinload(Participant).where(
                (Participant.giveaway_id == giveaway.message_id) & 
                (Participant.user_id == callback.from_user.id)
            )
        )
        if result.scalars().first():
            await callback.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ!")
            return
        new_participant = Participant(
            giveaway_id=giveaway.message_id,
            user_id=callback.from_user.id,
            username=callback.from_user.username,
            full_name=callback.from_user.full_name
        )
        session.add(new_participant)
        await session.commit()
    async with async_session() as session:
        count = await session.execute(
            "SELECT COUNT(*) FROM participants WHERE giveaway_id = :msg_id",
            {"msg_id": giveaway.message_id}
        )
        participant_count = count.scalar()
    await callback.answer("‚úÖ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ!")
    try:
        await bot.edit_message_text(
            chat_id=CHANNEL_ID,
            message_id=giveaway.channel_message_id,
            text=callback.message.text.split("\n\n")[0] + f"\n\n–£—á–∞—Å—Ç–≤—É–µ—Ç: {participant_count} —á–µ–ª–æ–≤–µ–∫",
            reply_markup=callback.message.reply_markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

# === –ü–û–°–ú–û–¢–†–ï–¢–¨ –£–ß–ê–°–¢–ù–ò–ö–û–í ===
@dp.callback_query(lambda c: c.data.startswith("list_"))
async def list_participants_callback(callback: types.CallbackQuery):
    msg_id = int(callback.data.split("_")[1])
    async with async_session() as session:
        result = await session.execute(
            selectinload(Giveaway).where(Giveaway.message_id == msg_id)
        )
        giveaway = result.scalars().first()
        if not giveaway:
            await callback.message.answer("‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.answer()
            return
        participants = giveaway.participants
        if not participants:
            await callback.message.answer("üì≠ –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        else:
            result_text = f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ ¬´{giveaway.title}¬ª:\n\n"
            for i, p in enumerate(participants, 1):
                username = f"@{p.username}" if p.username else "–±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞"
                result_text += f"{i}. {username} (ID: {p.user_id})\n"
            await callback.message.answer(result_text)
    await callback.answer()

# === –í–´–ë–†–ê–¢–¨ –ü–û–ë–ï–î–ò–¢–ï–õ–Ø ===
@dp.message(Command("winner"))
async def select_winner(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        _, msg_id, user_id = message.text.split()
        msg_id = int(msg_id)
        user_id = int(user_id)
    except:
        await message.answer("‚ùó /winner <id_–ø–æ—Å—Ç–∞> <id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")
        return
    async with async_session() as session:
        participant = await session.execute(
            selectinload(Participant).where(
                (Participant.giveaway_id == msg_id) & 
                (Participant.user_id == user_id)
            )
        )
        participant = participant.scalars().first()
        if not participant:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç")
            return
        try:
            await bot.send_message(
                user_id,
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏:\n<b>{participant.giveaway.title}</b>\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!",
                parse_mode="HTML"
            )
            status = "‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω"
        except Exception as e:
            status = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å: {str(e)}"
        try:
            await bot.edit_message_text(
                chat_id=CHANNEL_ID,
                message_id=participant.giveaway.channel_message_id,
                text=f"üéâ –†–û–ó–´–ì–†–´–®: {participant.giveaway.title}\n\nüèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {participant.full_name} (ID: {user_id})\n\n–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω!"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
        await session.delete(participant.giveaway)
        await session.commit()
    await message.answer(f"{status}\n\n‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω")

# === –ó–ê–ü–£–°–ö ===
async def main():
    await init_db()
    asyncio.create_task(start_webserver())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())